#!/usr/bin/env bash
set -o nounset
set -o errexit
set -o pipefail

export PATH="${PATH}:/usr/local/bin"
export COMPOSE_PROJECT_NAME="unms"

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

APP_DIR="${SCRIPT_DIR}"
DATA_DIR=$( readlink -f ${APP_DIR}/../data )
DOCKER_COMPOSE_FILENAME="docker-compose.yml"
DOCKER_COMPOSE_FILE="${APP_DIR}/${DOCKER_COMPOSE_FILENAME}"

# Log given message and exit.
fail() {
  echo >&2 "$1"
  exit 1
}

if [ ! -f "${DOCKER_COMPOSE_FILE}" ]; then
  fail "Docker Compose file '${DOCKER_COMPOSE_FILE}' not found."
fi

isRunning() {
  status=$(docker-compose ps -q) || fail "Failed to determine UNMS status."

  if [ "${status}" = "" ]; then
    return 1
  else
    return 0
  fi
}

start() {
  echo "Starting UNMS..."
  docker-compose up -d || fail "Failed to start UNMS."
  echo "UNMS started."
}

stop() {
  echo "Stopping UNMS..."
  docker-compose down || fail "Failed to stop UNMS."
  echo "UNMS stopped."
}

# Check redis append only file in ../data/redis/appendonly.aof and fix it if necessary.
fix-redis-aof() {
  docker-compose run --no-deps --rm --entrypoint /usr/local/bin/redis-check-aof redis --fix /data/db/appendonly.aof <<EOF
Y
EOF
}

# Shrink the redis append only file in ../data/redis/appendonly.aof.
rewrite-redis-aof() {
  docker-compose -p unms exec redis redis-cli bgrewriteaof || fail "Failed to rewrite redis appendonly file."
}

refresh-certificate() {
  SSL_CERT=$(source unms.conf && echo "${SSL_CERT}")
  if ! [ -e "../data/cert/domain" ]; then
    fail "Domain file not found."
  fi

  DOMAIN=$(head -n 1 ../data/cert/domain)
  if [ -n "${SSL_CERT}" ]; then
    # Refresh custom certificate if it changed.
    docker-compose -p unms exec nginx sudo -E -u unms /cert.sh "${DOMAIN}"
  else
    # Refresh Let's Encrypt certificate.
    docker-compose -p unms exec nginx sudo -E -u unms /letsencrypt.sh "${DOMAIN}"
  fi
}

reduce-device-update-frequency() {
  local originalSettings
  local updatedSettings
  originalSettings=$(docker-compose -p unms exec redis redis-cli --raw get nms:nms | sed 's/\r//g' | tr -d '\n') || fail "Failed to get UNMS settings."
  updatedSettings=$(echo -n "${originalSettings}" | sed 's/deviceTransmissionProfile\":\"[^\"]*/deviceTransmissionProfile\":\"auto/')
  docker-compose -p unms exec redis redis-cli set nms:nms "${updatedSettings}" || fail "Failed to update UNMS settings."
  echo "Device connection frequency changed to 'auto'. Please restart UNMS to apply changes: sudo bash ${SCRIPT_DIR}/unms-cli restart"
}
(
  cd "${APP_DIR}"

  if [ "$*" = "stop" ]; then
    if isRunning; then
      stop
    else
      echo "UNMS is not running"
    fi
    echo "To completely remove all UNMS data, please delete directories ${DATA_DIR} and ${APP_DIR}"
    echo "You may also wish to remove the UNMS user account."
    exit 0
  fi

  if [ "$*" = "start" ]; then
    if isRunning; then
      echo "UNMS is already running"
    else
      start
    fi
    exit 0
  fi

  if [ "$*" = "restart" ]; then
    if isRunning; then
      stop
    fi
    start
    exit 0
  fi

  if [ "$*" = "fix-redis-aof" ]; then
    if isRunning; then
      fail "Please stop UNMS first with 'unms-cli stop'"
    fi

    fix-redis-aof
    exit 0
  fi

  if [ "$*" = "rewrite-redis-aof" ]; then
    if ! isRunning; then
      fail "UNMS is not running"
    fi

    rewrite-redis-aof
    exit 0
  fi

  if [ "$*" = "refresh-certificate" ]; then
    if ! isRunning; then
      echo "UNMS is not running"
    fi
    refresh-certificate
    exit 0
  fi

  if [ "$*" = "reduce-device-update-frequency" ]; then
    if ! isRunning; then
      echo "UNMS is not running"
    fi
    reduce-device-update-frequency
    exit 0
  fi

  echo "Usage: unms-cli [start|stop|restart|fix-redis-aof|rewrite-redis-aof|refresh-certificate|reduce-device-update-frequency]"
  exit 0
)
