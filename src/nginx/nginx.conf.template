# user defines the user that will own and run the Nginx server
user unms nogroup;
# 'user nobody nobody;' for systems with 'nobody' as a group instead

# Reference: http://docs.gunicorn.org/en/stable/deploy.html
# worker_processes defines the number of worker processes.
# A recommended value for this parameter is the number of cores that are being used by your server.
worker_processes ${WORKER_PROCESSES};

error_log /dev/stderr;

# Make env variables available to shell scripts executed through lua module.
env SSL_CERT;
env SSL_CERT_KEY;
env SSL_CERT_CA;

events {
  worker_connections 8192; # increase if you have lots of clients
  accept_mutex on; # set to 'on' if nginx worker_processes > 1
}

http {
  include mime.types;
  # fallback in case we can't determine a type
  default_type application/octet-stream;
  access_log off;
  sendfile on;
  server_tokens off;

  set_real_ip_from  ${LOCAL_NETWORK};
  real_ip_header    X-Forwarded-For;
  real_ip_recursive on;

  # limit device connection rate
  map $http_upgrade $limit {
    default device_connecting;
    ""      "";
  }
  limit_req_zone $limit zone=throttle:1m rate=50r/s;
  limit_req zone=throttle burst=500;

  map $http_upgrade $connection_upgrade {
    default upgrade;
    ""      close;
  }

  upstream webserver {
    server ${UNMS_HOST}:${UNMS_HTTP_PORT};
  }

  upstream websocket {
    server ${UNMS_HOST}:${UNMS_WS_PORT};
  }

  upstream shell {
    server ${UNMS_HOST}:${UNMS_WS_SHELL_PORT};
  }

  upstream ws_api {
    server ${UNMS_HOST}:${UNMS_WS_API_PORT};
  }

  server {
    listen 12345;

    location /refresh-certificate {
      content_by_lua_block {
        domain = ngx.var.arg_domain;
        type = ngx.var.arg_type;

        function log(message)
          -- prints given message to nginx log
          message = string.gsub(message, "'", "'\\''")
          os.execute("echo '" .. message .. "'")
        end

        -- don't continue if domain is empty or contains characters not allowed in domains or IP addresses
        -- allowed characters are [a-z A-Z 0-9 . : -]
        if not string.find(domain, "^[%w%.:-]+$") then
          log('/cert called with invalid domain "' .. domain .. '"');
          ngx.status = 400
          ngx.print('Invalid domain')
          return ngx.exit(400)
        end
        -- don't continue if certificate type contains invalid characters
        if not string.find(type, "^[%w-]+$") then
          log('/cert called with invalid type "' .. type .. '"');
          ngx.status = 400
          ngx.print('Invalid cert type, expected "custom", "self-signed" or "lets-encrypt"')
          return ngx.exit(400)
        end

        function execute(command)
          -- returns success, error code, output.
          local f = io.popen(command..' 2>&1 && echo " $?"')
          local output = f:read"*a"
          local begin, finish, code = output:find" (%d+)\n$"
          output, code = output:sub(1, begin, -1), tonumber(code)
          return code == 0 and true or false, code, output
        end

        log('Calling refresh-certificate.sh --' .. type ..' "' .. domain .. '"');
        success, code, output = execute('/refresh-certificate.sh --' .. type ..' "' .. domain .. '"')
        log(output)
        if code ~= 0 then
          ngx.req.set_header("Content-Type", "text/plain")
          ngx.status = 500
          ngx.print(output)
          return ngx.exit(500)
        else
          ngx.req.set_header("Content-Type", "text/plain")
          ngx.print('OK')
          return ngx.exit(200)
        end
      }
    }
  }

  server {
    listen ${HTTP_PORT} default;

    location /.well-known/acme-challenge {
      root /www;
    }

    location / {
      return 301 https://$host:${PUBLIC_HTTPS_PORT}$request_uri;
    }
  }

  include /etc/nginx/conf.d/*.conf;
}
